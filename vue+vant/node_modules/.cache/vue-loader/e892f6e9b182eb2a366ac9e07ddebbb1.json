{"remainingRequest":"G:\\dingCanMobile\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\dingCanMobile\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\dingCanMobile\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\dingCanMobile\\src\\views\\my.vue?vue&type=template&id=15c04174&scoped=true&","dependencies":[{"path":"G:\\dingCanMobile\\src\\views\\my.vue","mtime":1592785216545},{"path":"G:\\dingCanMobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1587344699430},{"path":"G:\\dingCanMobile\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1587344055016},{"path":"G:\\dingCanMobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1587344699430},{"path":"G:\\dingCanMobile\\node_modules\\vue-loader\\lib\\index.js","mtime":1587344054728}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}